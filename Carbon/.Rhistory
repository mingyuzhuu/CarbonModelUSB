library(ProjectTemplate)
library(ggplot2)
library(plyr)
library(reshape2)
library(tidyselect)
library(dplyr)
library(data.table)
library(tinytex)
library(gridExtra)
library(zoo)
setwd('E:/20190923 Newcastle-M.Res/OneDrive - Newcastle University/20_21_autumn/210324 Journal Paper/4_USB Carbon/Carbon')
#create.project('Carbon')
load.project()
scoreMean = rollmean(vis$score, 15,na.pad=TRUE)
DscoreMean = rollmean(vis$Dscore, 15,na.pad=TRUE)
NscoreMean = rollmean(vis$Nscore, 15,na.pad=TRUE)
ggplot(data = vis,aes(x = date)
) + geom_line(aes(y = DscoreMean ),colour = 'red',size =1.5
) + geom_line(aes(y = NscoreMean), colour = 'blue', size =1.5
) + geom_line(aes(y = scoreMean), colour = 'black', size =1.5)
library(ggplot2)
ggplot2(data = vis,aes(x = date)
) + geom_line(aes(y = DscoreMean ),colour = 'red',size =1.5
) + geom_line(aes(y = NscoreMean), colour = 'blue', size =1.5
) + geom_line(aes(y = scoreMean), colour = 'black', size =1.5)
ggplot2::(data = vis,aes(x = date)
) + geom_line(aes(y = DscoreMean ),colour = 'red',size =1.5
) + geom_line(aes(y = NscoreMean), colour = 'blue', size =1.5
) + geom_line(aes(y = scoreMean), colour = 'black', size =1.5)
library(ggplot2)
remove.packages('rlang')
.libPaths()
install.packages('rlang')
install.packages("rlang")
package_version('rlang')
packageVersion('rlang')
library(ggplot2)
library(ggplot2)
ggplot(data = vis,aes(x = date)
) + geom_line(aes(y = DscoreMean ),colour = 'red',size =1.5
) + geom_line(aes(y = NscoreMean), colour = 'blue', size =1.5
) + geom_line(aes(y = scoreMean), colour = 'black', size =1.5)
ggplot(data = vis,aes(x = X)
) + geom_line(aes(y = DscoreMean ),colour = 'red',size =1.5
) + geom_line(aes(y = NscoreMean), colour = 'blue', size =1.5
) + geom_line(aes(y = scoreMean), colour = 'black', size =1.5)
library(ProjectTemplate)
library(ggplot2)
library(plyr)
library(reshape2)
library(tidyselect)
library(dplyr)
library(data.table)
library(tinytex)
library(gridExtra)
library(tidyr)
library(zoo)
setwd('E:/20190923 Newcastle-M.Res/OneDrive - Newcastle University/200407 M.Res/200712/yearly')
#create.project('yearly')
load.project()
###########################
#prepare the energy consumption data
#combine the monthly data of consumption
consumption = rbind(X1_Jan, X2_Feb, X3_Mar, X4_Apr, X5_May, X6_Jun, X7_Jul, X8_Aug, X9_Sep, X10_Oct, X11_Nov, X12_Dec)
#fill in the voids
consumption_fill = consumption %>%fill(names(consumption), .direction =  'downup')
#total consumption of each 15 mins time period
consumption_fill$total = apply(consumption_fill[2:30],1, sum)
#prepare  the daily consumption matrix
daily = data.frame(t(matrix(consumption_fill$total, nrow = 96, ncol = 365)))
# daily consumption of the whole building
daily$total = (apply(daily[1:96],1,sum))/4  #total
daily$day = (apply(daily[33:68],1,sum))/4   #daytime consumption 8am-17pm
daily$night = daily$total - daily$day       #nighttime consumption 0am-8am,17pm-0am
# simplified daily data
daily_sim = data.frame(date = (seq(as.Date('2019/01/01'), by = 'day',
length.out = 365)), actual = daily$total) #total
daily_sim$day = daily$day  #daytime consumption 8am-17pm
daily_sim$night = daily$night  #nighttime consumption 0am-8am,17pm-0am
###########################
#prepare the occupancy data
occ_annual[is.na(occ_annual)] = 0 #replace NA with 0
occ_annual$total = apply(occ_annual[2:165],1, sum)   #total occupancy each 15mins
occ_daily = data.frame(t(matrix(occ_annual$total, nrow = 96, ncol = 365)))  #matrix of 15mins ,row means each day
occ_daily$total = (apply(occ_daily[1:96],1,sum))/4 # columns contain daily total occupancy
occ_daily$day = (apply(occ_daily[33:68],1,sum))/4   # day time consumption from 8:00 till 17:00
occ_daily$night = occ_daily$total - occ_daily$day   # rest of the time are classified as night time
daily_sim$occTotal = occ_daily$total
daily_sim$occDay = occ_daily$day
daily_sim$occNight = occ_daily$night
###########################
##prepare the weather data
#join all the raw data and drop columns not useful
ws = subset(rbind(Wind_0, Wind_1, Wind_2),select = -c(X))  #weed speed
sr = subset(rbind(Radiance_0, Radiance_1), select = -c(X))  #solar radiance
humid = subset(humid, select = -c(X))   #humidity
tem = subset(tem, select = -c(order))   #ambient temperature
#split time into date and time columns
library(stringr)
tem = cbind(str_split_fixed(tem$time, "T",2),tem[,2:3])
colnames(tem)[1] = 'Date'
colnames(tem)[2] = 'Time'
ws = cbind(str_split_fixed(ws$time, "T",2), ws[,2:3])
colnames(ws)[1] = 'Date'
colnames(ws)[2] = 'Time'
humid = cbind(str_split_fixed(humid$time, "T",2), humid[,2:3])
colnames(humid)[1] = 'Date'
colnames(humid)[2] = 'Time'
sr = cbind(str_split_fixed(sr$time, "T",2), sr[,2:3])
colnames(sr)[1] = 'Date'
colnames(sr)[2] = 'Time'
#delete the mistake record
tem_correct = tem[!(tem$value>40),]
humid_correct = humid[!(humid$value>100),]
#get the average value of each day
daily_sim$tem = ddply(tem_correct,.(Date), summarise, tem_ave=mean(value))[,2]
daily_sim$ws = ddply(ws,.(Date), summarise, ws_ave=mean(value))[,2]
daily_sim$humid = ddply(humid_correct,.(Date), summarise, humid_ave=mean(value))[,2]
daily_sim$sr = ddply(sr,.(Date), summarise, sr_ave=mean(value))[,2]
###########################
# split the data into term and none term period
daily_term = rbind(daily_sim[7:88,], daily_sim[119:165,], daily_sim[266:347,])
daily_nonterm = rbind(daily_sim[1:6,], daily_sim[89:118,], daily_sim[166:265,], daily_sim[348:365,])
###########################
#remove the weekend
rownames(daily_term) = 1:nrow(daily_term)
t1 = daily_term[1:82,]
t1 = t1 %>% dplyr::filter((row_number() %% 7 != 6) & (row_number() %% 7 != 0)) ## Delete Saturday and Sunday
t2 = daily_term[83:129,]
rownames(t2) = 1:nrow(t2)
t2 = t2 %>% dplyr::filter((row_number() %% 7 != 6) & (row_number() %% 7 != 0)) ## Delete Saturday and Sunday
t3 = daily_term[130:211,]
rownames(t3) = 1:nrow(t3)
t3= t3 %>% dplyr::filter((row_number() %% 7 != 6) & (row_number() %% 7 != 0)) ## Delete Saturday and Sunday
daily_term_weekday = rbind(t1,t2,t3)
########
rownames(daily_nonterm) = 1:nrow(daily_nonterm)
n1 = daily_nonterm[1:4,]
n2 = daily_nonterm[7:36,]
rownames(n2) = 1:nrow(n2)
n2 = n2 %>% dplyr::filter((row_number() %% 7 != 1) & (row_number() %% 7 != 2))
n3 = daily_nonterm[37:136,]
rownames(n3) = 1:nrow(n3)
n3 = n3 %>% dplyr::filter((row_number() %% 7 != 1) & (row_number() %% 7 != 2))
n4 = daily_nonterm[137:154,]
rownames(n4) = 1:nrow(n4)
n4 = n4 %>% dplyr::filter((row_number() %% 7 != 1) & (row_number() %% 7 != 2))
daily_nonterm_weekday = rbind(n1, n2, n3, n4)
###########################
#preparing the simulation data
annual.hourly$total = apply(annual.hourly[3:410],1, sum)   #total occupancy each hour
annual.hourly$total = annual.hourly$total*0.000000277778
simu_daily = data.frame(t(matrix(annual.hourly$total, nrow = 24, ncol = 365)))  #matrix of each hour ,row means each day
simu_daily$total = apply(simu_daily[1:24],1,sum)  #total
simu_daily$day = apply(simu_daily[8:17],1,sum)   #daytime consumption 8am-17pm
simu_daily$night = simu_daily$total - simu_daily$day       #nighttime consumption 0am-8am,17pm-0am
# split the data into term and none term period
simu_term = rbind(simu_daily[7:88,], simu_daily[119:165,], simu_daily[266:347,])
simu_nonterm = rbind(simu_daily[1:6,], simu_daily[89:118,], simu_daily[166:265,], simu_daily[348:365,])
#remove the weekend
rownames(simu_term) = 1:nrow(simu_term)
t1 = simu_term[1:82,]
t1 = t1 %>% dplyr::filter((row_number() %% 7 != 6) & (row_number() %% 7 != 0)) ## Delete Saturday and Sunday
t2 = simu_term[83:129,]
rownames(t2) = 1:nrow(t2)
t2 = t2 %>% dplyr::filter((row_number() %% 7 != 6) & (row_number() %% 7 != 0)) ## Delete Saturday and Sunday
t3 = simu_term[130:211,]
rownames(t3) = 1:nrow(t3)
t3= t3 %>% dplyr::filter((row_number() %% 7 != 6) & (row_number() %% 7 != 0)) ## Delete Saturday and Sunday
simu_term_weekday = rbind(t1,t2,t3)
########
rownames(simu_nonterm) = 1:nrow(simu_nonterm)
n1 = simu_nonterm[1:4,]
n2 = simu_nonterm[7:36,]
rownames(n2) = 1:nrow(n2)
n2 = n2 %>% dplyr::filter((row_number() %% 7 != 1) & (row_number() %% 7 != 2))
n3 = simu_nonterm[37:136,]
rownames(n3) = 1:nrow(n3)
n3 = n3 %>% dplyr::filter((row_number() %% 7 != 1) & (row_number() %% 7 != 2))
n4 = simu_nonterm[137:154,]
rownames(n4) = 1:nrow(n4)
n4 = n4 %>% dplyr::filter((row_number() %% 7 != 1) & (row_number() %% 7 != 2))
simu_nonterm_weekday = rbind(n1, n2, n3, n4)
###########################
#add simulation result into the dataset
daily_term_weekday$sim = simu_term_weekday $total
daily_term_weekday$simDay = simu_term_weekday $day
daily_term_weekday$simNight = simu_term_weekday $night
daily_nonterm_weekday$sim = simu_nonterm_weekday $total
daily_nonterm_weekday$simDay = simu_nonterm_weekday $day
daily_nonterm_weekday$simNight = simu_nonterm_weekday $night
#write.csv(daily_term_weekday, 'termm.csv',row.names = FALSE)
#write.csv(daily_nonterm_weekday, 'nontermm.csv',row.names = FALSE)
###########################
#add EUI into the dataset
daily_term_weekday$actEUI = daily_term_weekday$actual/12.5
daily_term_weekday$dayEUI = daily_term_weekday$day/12.5
daily_term_weekday$nightEUI = daily_term_weekday$night/12.5
daily_term_weekday$simEUI = daily_term_weekday$sim/12.5
daily_term_weekday$simDEUI = daily_term_weekday$simDay/12.5
daily_term_weekday$simNEUI = daily_term_weekday$simNight/12.5
daily_term_weekday$difEUI = daily_term_weekday$actEUI - daily_term_weekday$simEUI
daily_term_weekday$difDEUI = daily_term_weekday$dayEUI - daily_term_weekday$simDEUI
daily_term_weekday$difNEUI = daily_term_weekday$nightEUI - daily_term_weekday$simNEUI
########
daily_nonterm_weekday$actEUI = daily_nonterm_weekday$actual/12.5
daily_nonterm_weekday$dayEUI = daily_nonterm_weekday$day/12.5
daily_nonterm_weekday$nightEUI = daily_nonterm_weekday$night/12.5
daily_nonterm_weekday$simEUI = daily_nonterm_weekday$sim/12.5
daily_nonterm_weekday$simDEUI = daily_nonterm_weekday$simDay/12.5
daily_nonterm_weekday$simNEUI = daily_nonterm_weekday$simNight/12.5
daily_nonterm_weekday$difEUI = daily_nonterm_weekday$actEUI - daily_nonterm_weekday$simEUI
daily_nonterm_weekday$difDEUI = daily_nonterm_weekday$dayEUI - daily_nonterm_weekday$simDEUI
daily_nonterm_weekday$difNEUI = daily_nonterm_weekday$nightEUI - daily_nonterm_weekday$simNEUI
###########################
#multiple linear regression model
#model_term_day = lm( daily_term_weekday$dayEUI ~ daily_term_weekday$occDay + daily_term_weekday$tem + daily_term_weekday$ws)
#summary(model_term_day)
#model_term_night = lm( daily_term_weekday$nightEUI ~ daily_term_weekday$occNight + daily_term_weekday$tem + daily_term_weekday$ws)
#summary(model_term_night)
#model_nonterm_day = lm(daily_nonterm_weekday$dayEUI ~ daily_nonterm_weekday$occDay + daily_nonterm_weekday$tem + daily_nonterm_weekday$ws  + daily_nonterm_weekday$sr)
#summary(model_nonterm_day)
#model_nonterm_night = lm(daily_nonterm_weekday$nightEUI ~ daily_nonterm_weekday$occNight + daily_nonterm_weekday$tem + daily_nonterm_weekday$ws)
#summary(model_nonterm_night)
#########
#model_term = lm( daily_term_weekday$actEUI ~ daily_term_weekday$occTotal + daily_term_weekday$tem + daily_term_weekday$ws)
#summary(model_term)
#model_nonterm = lm( daily_nonterm_weekday$actEUI ~ daily_nonterm_weekday$occTotal + daily_nonterm_weekday$tem + daily_nonterm_weekday$ws)
#summary(model_nonterm)
#########
#model_termDif = lm( daily_term_weekday$difNEUI ~ daily_term_weekday$occNight + daily_term_weekday$tem + daily_term_weekday$ws)
#summary(model_termDif)
#model_nontermDif = lm( daily_nonterm_weekday$difEUI ~ daily_nonterm_weekday$occTotal + daily_nonterm_weekday$tem + daily_nonterm_weekday$ws)
#summary(model_nontermDif)
#model_nontermDifD = lm( daily_nonterm_weekday$difDEUI ~ daily_nonterm_weekday$occDay + daily_nonterm_weekday$tem + daily_nonterm_weekday$ws)
#summary(model_nontermDifD)
#model_nontermDifN = lm( daily_nonterm_weekday$difNEUI ~ daily_nonterm_weekday$occNight + daily_nonterm_weekday$tem + daily_nonterm_weekday$ws)
#summary(model_nontermDifN)
###############################
## log transformation of DEUI and day occupancy
daily_term_weekday$logDEUI = log(daily_term_weekday$dayEUI)
daily_term_weekday$logDocc = log(daily_term_weekday$occDay)
daily_term_weekday$logNEUI = log(daily_term_weekday$nightEUI)
daily_term_weekday$logNocc = log(daily_term_weekday$occNight)
daily_nonterm_weekday$logDEUI = log(daily_nonterm_weekday$dayEUI)
daily_nonterm_weekday$logDocc = log(daily_nonterm_weekday$occDay)
daily_nonterm_weekday$logNEUI = log(daily_nonterm_weekday$nightEUI)
daily_nonterm_weekday$logNocc = log(daily_nonterm_weekday$occNight)
##################################
## standardize the occupancy and weather data to a mean of 0 and sd of 1
termdataset = daily_term_weekday %>% mutate_at(c('tem','ws','humid','sr','logDocc','logNocc'), ~(scale(.) %>% as.vector))
termdataset = subset(termdataset, select = -c( difEUI,difDEUI,difNEUI))
##
nontermdataset = daily_nonterm_weekday %>% mutate_at(c('tem','ws','humid','sr','logDocc','logNocc'), ~(scale(.) %>% as.vector))
nontermdataset = subset(nontermdataset, select = -c(difEUI,difDEUI,difNEUI))
##################################
#####multiple regression###########
termdaymodel = lm(termdataset$logDEUI ~ termdataset$tem + termdataset$logDocc)
summary(termdaymodel)
termnightmodel = lm(termdataset$logNEUI ~ termdataset$tem)
summary(termnightmodel)
nontermdaymodel = lm(nontermdataset$logDEUI ~ nontermdataset$tem  + nontermdataset$logDocc)
summary(nontermdaymodel)
nontermnightmodel = lm(nontermdataset$logNEUI ~ nontermdataset$tem  + nontermdataset$logNocc)
summary(nontermnightmodel)
################################################
#####term time occupied (daytime)###########
termdataset$preDEUI = 5.756492-0.083560*termdataset$tem + 0.061265*termdataset$logDocc
termdataset$normDEUI = exp(termdataset$logDEUI - termdataset$preDEUI + 5.756492)
termdataset$Dgap  = termdataset$normDEUI - termdataset$simDEUI
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
termdataset$Dgapscore = 1 - range01(termdataset$Dgap)
termdataset$Dscore = 1 - range01(termdataset$normDEUI)
#####term time unoccupied (nighttime)###########
termdataset$Ngap = termdataset$nightEUI - termdataset$simNEUI
termdataset$Ngapscore = 1 - range01(termdataset$Ngap)
termdataset$Nscore = 1 - range01(termdataset$nightEUI)
#####simplified dataset###########
termscore = subset(termdataset, select = c(date,Dgapscore,Dscore,Ngapscore,Nscore))#######################
################################################
#####nonterm time occupied (daytime)###########
nontermdataset$preDEUI = 5.6557+0.08372*nontermdataset$tem + 0.18959*nontermdataset$logDocc
nontermdataset$normDEUI = exp(nontermdataset$logDEUI - nontermdataset$preDEUI + 5.6557)
nontermdataset$Dgap  = nontermdataset$normDEUI - nontermdataset$simDEUI
nontermdataset$Dgapscore = 1 - range01(nontermdataset$Dgap)
nontermdataset$Dscore = 1 - range01(nontermdataset$normDEUI)
#####nonterm time unoccupied (nighttime)###########
nontermdataset$Ngap = nontermdataset$nightEUI - nontermdataset$simNEUI
nontermdataset$Ngapscore = 1 - range01(nontermdataset$Ngap)
nontermdataset$Nscore = 1 - range01(nontermdataset$nightEUI)
#####simplified dataset###########
nontermscore = subset(nontermdataset, select = c(date,Dgapscore,Dscore,Ngapscore,Nscore))
#####combined dataset###########
allscore = rbind(nontermscore, termscore)
allscore = allscore %>% arrange(date)
#################
#get over all all-time score
q1 = subset(nontermdataset, select = c(date,occTotal,tem,ws,humid,sr,actEUI,simEUI))
q2 = subset(termdataset, select = c(date,occTotal,tem,ws,humid,sr,actEUI,simEUI))
q1$logEUI = log(q1$actEUI)
q1$logOcc = log(q1$occTotal)
q1 = q1 %>% mutate_at(c('logOcc'), ~(scale(.) %>% as.vector))
q2$logEUI = log(q2$actEUI)
q2$logOcc = log(q2$occTotal)
q2 = q2 %>% mutate_at(c('logOcc'), ~(scale(.) %>% as.vector))
q2 = q2 %>% mutate_at(c('tem','ws','humid','sr'), ~(scale(.) %>% as.vector))
q = rbind(q1, q2)
q = q %>% arrange(date)
q$gap = q$actEUI - q$simEUI
q$score = 1 - range01(q$actEUI)
q$gapscore = 1 - range01(q$gap)
######################
allscore$score = q$score
allscore$gapscore = q$gapscore
#write.csv(allscore, file = 'layer3.csv', row.names = F)
##rolling mean
xx = rollmean(allscore$score, 15,na.pad=TRUE)
yy = rollmean(allscore$Dscore, 15,na.pad=TRUE)
zz = rollmean(allscore$Nscore, 15,na.pad=TRUE)
##deviation between alltime and segmented
#xx1 = allscore$Dscore - allscore$score
#yy1 = allscore$Nscore - allscore$score
##rolling mean
xxx = rollmean(allscore$gapscore, 15,na.pad=TRUE)
yyy = rollmean(allscore$Dgapscore, 15,na.pad=TRUE)
zzz = rollmean(allscore$Ngapscore, 15,na.pad=TRUE)
allscore$roDgap = yyy
allscore$roNgap = zzz
allscore$rogap = xxx
######################
ggplot(data = allscore,aes(x = date)
) + geom_line(aes(y = yy ),colour = 'red',size =1.5
) + geom_line(aes(y = zz), colour = 'blue', size =1.5
) + geom_line(aes(y = xx), colour = 'black', size =1.5)
library(ProjectTemplate)
library(ggplot2)
library(plyr)
library(reshape2)
library(tidyselect)
library(dplyr)
library(data.table)
library(tinytex)
library(gridExtra)
library(zoo)
setwd('E:/20190923 Newcastle-M.Res/OneDrive - Newcastle University/20_21_autumn/210324 Journal Paper/4_USB Carbon/Carbon')
#create.project('Carbon')
load.project()
scoreMean = rollmean(vis$score, 15,na.pad=TRUE)
DscoreMean = rollmean(vis$Dscore, 15,na.pad=TRUE)
NscoreMean = rollmean(vis$Nscore, 15,na.pad=TRUE)
vis$date = as.Date(vis$X, "%Y-%m-%d")
ggplot(data = vis,aes(x = date)
) + geom_line(aes(y = DscoreMean ),colour = 'red',size =1.5
) + geom_line(aes(y = NscoreMean), colour = 'blue', size =1.5
) + geom_line(aes(y = scoreMean), colour = 'black', size =1.5)
gapscoreMean = rollmean(vis$gapscore, 15,na.pad=TRUE)
DgapscoreMean = rollmean(vis$Dgapscore, 15,na.pad=TRUE)
NgapscoreMean = rollmean(vis$Ngapscore, 15,na.pad=TRUE)
ggplot(data = vis,aes(x = date)
) + geom_line(aes(y = DgapscoreMean ),colour = 'red',size =1.5
) + geom_line(aes(y = NgapscoreMean), colour = 'blue', size =1.5
) + geom_line(aes(y = gapscoreMean), colour = 'black', size =1.5)
View(nontermData)
